{"name":"S3album","tagline":"A pure client-side photo album (gallery) publisher for S3.","body":"# S3 Album Publisher\r\nA pure client-side photo album publisher for S3.\r\n\r\n## Overview\r\n- <b>Browse</b> your bucket for photos.\r\n- <b>Publish</b> albums from your photos.\r\n- <b>Share</b> albums with their public URL.\r\n\r\nThe albums you publish are <b>private</b>: they can only be found if you\r\nknow the album's URL.\r\n\r\nBeing a pure web-app means:\r\n- <b>Configuration-free:</b> upload the scripts to S3 and start publishing albums right away.\r\n- <b>Database-free:</b> no database is required for creating or viewing albums. Albums are self contained and portable.\r\n- <b>No server-side scripts</b>: all the operations are done in your\r\n  browser, including resizing photos and thumbnails.\r\n\r\n## Getting Started\r\n\r\n1. Upload `album.html`, `publish.html` and `admin.js` to a path in\r\nyour S3 bucket, for example, `public-albums/`. This can be done with\r\n[s3cmd](https://github.com/s3tools/s3cmd):\r\n```bash\r\ns3cmd put album.html publish.html admin.js s3://bucket/public-albums/\r\n```\r\n2. In your browser, navigate to `https://domain.of.bucket/public-albums/publish.html`,\r\n   enter your S3 credentials, and start publishing albums!\r\n\r\n## How It Works\r\n\r\n##### Publishing\r\n`publish.html` uses the Amazon JavaScript SDK to browse your bucket for\r\nphotos you would like to publish in an album. When you create a new\r\nalbum, a directory in your published albums path is created. For\r\nexample, the album with name 'My Holiday Pics' is created in\r\n`public-albums/albums/My Holiday Pics/`. When you add a photo to the\r\nalbum:\r\n - it is copied, resized, and placed in `public-albums/albums/My Holiday Pics/photos/`; and\r\n - a thumbnail is created and placed in `public-albums/albums/My Holiday Pics/thumbs/`.\r\n\r\nThat's all there is to publishing. No databases. No calls to server-side\r\nscripts. No adding filenames to index files.\r\n\r\n##### Viewing\r\n`album.html` is used to view published albums. The name of the album is\r\nspecified in the hash of the URL, for example,\r\n`https://domain.of.bucket/public-albums/album.html#My Holiday\r\nPics`.  The photos for the album are found by listing the contents of\r\n`albums/My Holiday Pics/photos/` (relative to the location of\r\n`album.html`) and then dynamically added to the page.\r\n\r\n## S3 Bucket Policy\r\n\r\n#### Anonymous access\r\nIf you want anyone on the web to view your published albums, your bucket\r\npolicy should allow anonymous <i>getObject</i> and <i>listBucket</i>\r\nrequests. If your bucket doesn't already allow anonymous requests, the\r\nmimimum you need to add is:\r\n\r\n- A statement allowing aonymous <i>getObject</i> requests to the\r\npath of your published albums, for example `public-albums/`:\r\n\r\n```js\r\n{\r\n  \"Sid\": \"AnonGetAlbumObjects\",\r\n  \"Effect\": \"Allow\",\r\n  \"Principal\": \"*\",\r\n  \"Action\": \"s3:GetObject\",\r\n  \"Resource\": [\r\n    \"arn:aws:s3:::bucket/public-albums/*\",\r\n    \"arn:aws:s3:::bucket/favicon.ico\"\r\n  ]\r\n},\r\n```\r\n- A statement allowing anyone to list the contents of the individual\r\n  album directories (but not list all the albums that you have):\r\n```js\r\n{\r\n  \"Sid\": \"AnonListObjects\",\r\n  \"Effect\": \"Allow\",\r\n  \"Principal\": \"*\",\r\n  \"Action\": \"s3:ListBucket\",\r\n  \"Resource\": \"arn:aws:s3:::bucket\",\r\n  \"Condition\": {\r\n    \"StringLike\": {\r\n      \"s3:prefix\": \"public-albums/albums/*/\"\r\n    }\r\n  }\r\n},\r\n```\r\n\r\n#### S3 user\r\nThe S3 user (also called principal) that you use to publish the albums\r\nshould have permission to:\r\n - read and list the paths where the original photos are stored; and\r\n - read, list and write the path where the albums are published to,\r\n   again, for example, `public-albums/`.\r\n\r\nIf your user has all permisions on the whole bucket, then no changes to\r\nthe bucket policy are necessary. However, if you want to restrict your\r\nuser to the minimum permisions necessary, add the following statements:\r\n\r\n- Grant permission to read (but not write) the paths where the original\r\n  photos are stored:\r\n\r\n```js\r\n{\r\n  \"Sid\": \"ReadMyPhotosDir\",\r\n  \"Effect\": \"Allow\",\r\n  \"Principal\": {\r\n    \"AWS\": \"arn:aws:iam::1234567890:user/my_albums_user\"\r\n  },\r\n  \"Action\": \"s3:GetObject\",\r\n  \"Resource\": \"arn:aws:s3:::bucket/my/photo/collection/*\"\r\n}\r\n```\r\n- Permission to list the paths where the original photos are stored, as\r\n  well as the published albums:\r\n```js\r\n{\r\n  \"Sid\": \"OnlyListSomeDirs\",\r\n  \"Effect\": \"Allow\",\r\n  \"Principal\": {\r\n    \"AWS\": \"arn:aws:iam::1234567890:user/my_albums_user\"\r\n  },\r\n  \"Action\": \"s3:ListBucket\",\r\n  \"Resource\": \"arn:aws:s3:::bucket\",\r\n  \"Condition\": {\r\n    \"StringLike\": {\r\n      \"s3:prefix\": [\r\n        \"my/photo/collection/*\",\r\n      \"public-albums/*\"\r\n      ]\r\n    }\r\n  }\r\n},\r\n```\r\n- Finally, the user should have full control over the directory where\r\n  the published albums are stored:\r\n```js\r\n{\r\n  \"Sid\": \"ObjectActionsOnAlbumsDir\",\r\n  \"Effect\": \"Allow\",\r\n  \"Principal\": {\r\n    \"AWS\": \"arn:aws:iam::1234567890:user/my_albums_user\"\r\n  },\r\n  \"Action\": \"s3:*\",\r\n  \"Resource\": [\r\n    \"arn:aws:s3:::bucket/public-albums/*\",\r\n  \"arn:aws:s3:::bucket/public-albums\"\r\n  ]\r\n},\r\n```\r\n \r\n## Custom install\r\n\r\nIt is also possible to store the albums in your bucket, but keep the\r\n`album.html` on another website. To do this, you can edit the\r\nconfiguration in `album.html` to point to your S3 bucket. Also, you will\r\nneed to ensure the CORS configuration for your bucket allows requests\r\nfrom different origins:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\r\n  <CORSRule>\r\n    <AllowedOrigin>*</AllowedOrigin>\r\n    <AllowedMethod>HEAD</AllowedMethod>\r\n    <AllowedMethod>GET</AllowedMethod>\r\n    <AllowedMethod>PUT</AllowedMethod>\r\n    <AllowedMethod>POST</AllowedMethod>\r\n    <AllowedMethod>DELETE</AllowedMethod>\r\n    <MaxAgeSeconds>3000</MaxAgeSeconds>\r\n    <ExposeHeader>ETag</ExposeHeader>\r\n    <ExposeHeader>x-amz-meta-custom-header</ExposeHeader>\r\n    <AllowedHeader>*</AllowedHeader>\r\n  </CORSRule>\r\n</CORSConfiguration>\r\n```\r\n\r\n## Dependencies\r\n\r\nThe following dependencies are included in the HTML files and hosted by\r\nCDNs ([cdnjs](https://cdnjs.com/about) and [Goolge Hosted\r\nLibraries](https://developers.google.com/speed/libraries/)):\r\n\r\n- Bootstrap\r\n- jQuery\r\n- Fancybox\r\n- Amazon JavaScript SDK\r\n\r\n## Optional: External Image Resizer\r\nBy default, image resizing is done in the browser. This means that the\r\noriginal image is downloaded from S3, resized and then uploaded to its\r\nfinal location. This may perform badly with large photos, slow internet\r\nconnections and/or slow web browsers. Furthermore, the resizing in the\r\nbrowser isn't perfect and may introduce artifacts.\r\n\r\nThere is a hook in `publish.js` to plugin your own image resizer. You\r\ncan, for example, send a XHR request to a PHP script that will download,\r\nresize and upload the photo/thumb to the bucket.\r\n\r\n## TODO / Contributing\r\n\r\n(Here's where you come in)\r\n\r\n- [x] Automatically detect settings (bucket name, paths, etc.)\r\n- [ ] Choose photo and thumb sizes in settings dialog\r\n- [ ] Resize images in the browser without introducing artifacts.\r\n- [ ] Upload images directly from `publish.html`\r\n- [ ] Generate thumbnails for the bucket file browser\r\n- [ ] Select multiple files to add at the same time\r\n- [ ] Filter selectable file types\r\n- [ ] Make the general design more pretty\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}